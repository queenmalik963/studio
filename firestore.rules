
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;

      // Anyone can read a user's followers/following list.
      // Only the user can be added/removed from their own list (handled by security rules on the other user's document).
      match /followers/{followerId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
      match /following/{followingId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }

    // Authenticated users can read and create rooms.
    // Only the room owner can update or delete it.
    match /rooms/{roomId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // Any authenticated user can read/write messages in any room.
      match /messages/{messageId} {
        allow read, write: if request.auth != null;
      }
    }
    
    // Authenticated users who are part of a conversation can read/write to it.
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Messages can be read/written by participants of the conversation.
      match /messages/{messageId} {
         allow read, write: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }
  }
}
