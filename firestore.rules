
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read any user's profile (needed for chat, profiles, etc.)
      allow read: if isSignedIn();
      
      // Only the user themselves can update their own profile
      allow write: if isSignedIn() && request.auth.uid == userId;

      // Rules for user subcollections (e.g., following, followers)
      match /{subcollection}/{docId} {
        allow read, write: if isSignedIn();
      }
    }

    // Rules for the 'rooms' collection
    match /rooms/{roomId} {
      // Any authenticated user can read room data
      allow read: if isSignedIn();
      
      // Any authenticated user can create a room
      allow create: if isSignedIn();

      // Only the owner of the room can update it (e.g., change title, lock seats)
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      
      // By default, disallow deletion of rooms to prevent accidents
      allow delete: if false;

      // Rules for room subcollections (e.g., messages)
      match /{subcollection}/{docId} {
        allow read, write: if isSignedIn();
      }
    }

    // Rules for the 'conversations' collection
    match /conversations/{conversationId} {
      // A user can read/write to a conversation only if they are a participant
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participants;

      // Rules for conversation subcollections (e.g., messages)
       match /{subcollection}/{docId} {
        allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
  }
}
