
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users can only create and manage their own profile
    match /users/{userId} {
      allow read: if isAuthenticated();
      // Allow create for new users, and update for existing owners.
      allow create, update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Anyone can view rooms, but only owners can modify them.
    match /rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    // Anyone authenticated can read/write to room subcollections (messages, etc.)
    match /rooms/{roomId}/{subcollection}/{documentId} {
        allow read, write: if isAuthenticated();
    }
    
    // Conversations can be read by anyone authenticated.
    match /conversations/{conversationId} {
      allow read: if isAuthenticated();
      // Only participants can create or update a conversation document.
      allow create, update: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
    }
    
    // Only participants can read or write messages in a conversation.
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
  }
}
